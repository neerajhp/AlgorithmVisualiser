{"version":3,"sources":["components/sorting/Algorithms/MergeSort.js","components/sorting/Algorithms/HeapSort.js","components/sorting/Algorithms/QuickSort.js","components/sorting/Algorithms/BinarySort.js","components/sorting/Algorithms/AlgorithmList.js","components/sorting/Algorithms/SelectionSort.js","components/sorting/Algorithms/InsertionSort.js","components/utils/llNode.js","components/pathfinding/Algorithms/BFS.js","components/pathfinding/Algorithms/AlgorithmList.js","components/SidebarAccordion.js","components/Sidebar.js","components/sorting/SortCard.js","components/utils/RandArray.js","components/sorting/SortingCanvas.js","components/pathfinding/Node.js","components/pathfinding/PathfindingCanvas.js","components/Canvas.js","components/App.js","index.js"],"names":["mergeSortHelper","startIndex","length","pointer","isOdd","mid","Math","floor","leftInd","rightInd","tmpArray","i","j","leftArrayEnd","rightArrayEnd","tmp","k","push","merge","heapify","array","left","right","max","quickSortHelper","index","pivot","partition","BinarySearch","startInd","endInd","keyInd","pop","BinarySort","SortingAlgorithms","name","label","stateList","perf","func","len","min","key","llNode","x","y","parent","visited","this","explore","node","nodeList","max_x","max_y","toExplore","console","log","BFS","gridList","origin","destination","queue","nextNodes","animationPath","map","col","square","shift","class","item","path","unshift","constructPath","PathfinderAlgorithms","Accordion","withStyles","root","background","boxShadow","borderBottom","display","margin","expanded","MuiAccordion","AccordionSummary","fontFamily","fontSize","marginBottom","minHeight","content","MuiAccordionSummary","AccordionDetails","theme","padding","spacing","MuiAccordionDetails","SidebarAccordion","canvasState","updateType","updateSort","updatePathfinder","React","useState","setExpanded","handleChange","panel","event","newExpanded","onChange","aria-controls","id","onClick","className","alg","Fragment","type","checked","sortingAlg","e","htmlFor","pfAlg","Sidebar","runFn","active","SortCard","algorithm","finished","graph","index_i","index_j","sorted","val","style","height","width","renderedArray","RandArray","size","Array","from","random","SortingCanvas","props","state","selectedAlgorithm","op","algorithms","AlgorithmList","timer","sort","forEach","start","performance","now","end","setState","resetApp","sim","setInterval","checkState","clearInterval","reset","animate","Component","Node","onMouseDown","onMouseUp","onContext","onMouseOverFn","nodeType","scale","selecting","onContextMenu","preventDefault","onMouseOver","PathfindingCanvas","updateDimensions","constructNodeList","container","dimensions","clientWidth","clientHeight","onClickMode","setOrigin","undefined","newNodes","setDestination","setObstacle","includes","mouseUpHandler","selectingObs","mouseDownHandler","mouseOverHandler","window","addEventListener","list","step","document","getElementById","classList","add","xArray","yArray","toggleObs","constructGrid","Canvas","searchType","canvas","App","updateSortAlgs","updatePathfinderAlgs","runAlgorithm","ref","interface","ReactDom","render","querySelector"],"mappings":"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","file":"static/js/main.0f362655.chunk.js","sourcesContent":["const merge = (leftInd, rightInd, length, isOdd, pointer) => {\n  // Get last state from state list\n  let tmpArray = [...pointer[pointer.length - 1][0]],\n    i = 0,\n    j = 0,\n    leftArrayEnd = length + isOdd,\n    rightArrayEnd = length;\n  // Iterate through left and right arrays\n  while (i < leftArrayEnd && j < rightArrayEnd) {\n    if (tmpArray[leftInd + i] > tmpArray[rightInd + j]) {\n      let tmp = tmpArray[rightInd + j];\n      let k = j;\n      //Shift section of left array to right\n      while (rightInd + k > leftInd + i) {\n        tmpArray[rightInd + k] = tmpArray[rightInd + k - 1];\n        k--;\n      }\n      tmpArray[leftInd + i] = tmp;\n      pointer.push([[...tmpArray], leftInd + i, rightInd + j]);\n      j++;\n      leftArrayEnd++;\n    } else {\n      pointer.push([[...tmpArray], leftInd + i, rightInd + j]);\n      i++;\n    }\n  }\n};\n\nfunction mergeSortHelper(startIndex, length, pointer) {\n  // Smallest partition\n  if (length <= 1) {\n    return startIndex;\n  }\n  // Handle odd interval sizes\n  let isOdd = length % 2 === 1 ? 1 : 0;\n\n  let mid = Math.floor(length / 2),\n    left = mergeSortHelper(startIndex, mid + isOdd, pointer),\n    right = mergeSortHelper(startIndex + mid + isOdd, mid, pointer);\n\n  merge(left, right, mid, isOdd, pointer);\n  return startIndex;\n}\n\n// Called by Application\nfunction MergeSort(array) {\n  // Copy array\n  let tmpArray = [...array[0][0]];\n  let length = tmpArray.length;\n  // Call Merge sort algorithm\n  mergeSortHelper(0, length, array);\n}\n\nexport default MergeSort;\n","// create max heap\nfunction heapify(array, i, length, pointer) {\n  let left = 2 * i + 1,\n    right = 2 * i + 2,\n    max = i;\n\n  pointer.push([[...array], i, left]);\n  if (left < length && array[left] > array[max]) {\n    max = left;\n  }\n\n  pointer.push([[...array], i, right]);\n  if (right < length && array[right] > array[max]) {\n    max = right;\n  }\n\n  if (max !== i) {\n    let tmp = array[i];\n    array[i] = array[max];\n    array[max] = tmp;\n    pointer.push([[...array], i, '']);\n    heapify(array, max, length, pointer);\n  }\n}\n\nfunction HeapSort(array) {\n  let tmpArray = [...array[0][0]];\n  let length = tmpArray.length;\n\n  for (let i = Math.floor(length / 2) - 1; i >= 0; i--) {\n    heapify(tmpArray, i, length, array);\n  }\n\n  for (let i = length - 1; i > 0; i--) {\n    let tmp = tmpArray[0];\n\n    tmpArray[0] = tmpArray[i];\n    tmpArray[i] = tmp;\n    length--;\n\n    heapify(tmpArray, 0, i, array);\n  }\n}\n\nexport default HeapSort;\n","function partition(array, left, right, pointer) {\n  let pivot = array[right],\n    i = left - 1;\n\n  for (let j = left; j <= right - 1; j++) {\n    pointer.push([[...array], right, j]);\n    if (array[j] < pivot) {\n      i++;\n\n      pointer.push([[...array], i, j]);\n      let tmp = array[i];\n      array[i] = array[j];\n      array[j] = tmp;\n      pointer.push([[...array], i, j]);\n    }\n  }\n\n  i++;\n  pointer.push([[...array], i, right]);\n  let tmp = array[i];\n  array[i] = array[right];\n  array[right] = tmp;\n\n  pointer.push([[...array], i, right]);\n  return i;\n}\n\nfunction quickSortHelper(array, left, right, pointer) {\n  var index;\n\n  if (left < right) {\n    index = partition(array, left, right, pointer);\n\n    quickSortHelper(array, left, index - 1, pointer);\n    quickSortHelper(array, index + 1, right, pointer);\n  }\n}\n\nfunction QuickSort(array) {\n  let tmpArray = [...array[0][0]];\n\n  quickSortHelper(tmpArray, 0, tmpArray.length - 1, array);\n}\n\nexport default QuickSort;\n","function BinarySearch(startInd, endInd, keyInd, pointer) {\n  let tmpArray = [...pointer.pop()[0]];\n\n  let mid = Math.floor((startInd + endInd) / 2);\n  pointer.push([[...tmpArray], keyInd, mid]);\n\n  if (endInd <= startInd) {\n    return tmpArray[keyInd] >= tmpArray[startInd] ? startInd + 1 : startInd;\n  }\n\n  if (tmpArray[keyInd] === tmpArray[mid]) return mid + 1;\n  if (tmpArray[keyInd] > tmpArray[mid]) {\n    return BinarySearch(mid + 1, endInd, keyInd, pointer);\n  }\n  return BinarySearch(startInd, mid - 1, keyInd, pointer);\n}\n\nfunction BinarySort(array) {\n  // Get array from state list\n  let tmpArray = [...array[0][0]];\n  let length = tmpArray.length;\n\n  // Perform insertion sort\n  for (let key = 1; key < length; key++) {\n    let tmp = tmpArray[key];\n    let j = key - 1;\n    //Perform Binary search\n    let index = BinarySearch(0, j, key, array);\n\n    //Shift array right\n    while (j >= index) {\n      tmpArray[j + 1] = tmpArray[j];\n      j--;\n    }\n    tmpArray[j + 1] = tmp;\n    array.push([[...tmpArray], key, index]);\n  }\n}\n\nexport default BinarySort;\n","import SelectionSort from './SelectionSort';\nimport MergeSort from './MergeSort';\nimport InsertionSort from './InsertionSort';\nimport HeapSort from './HeapSort';\nimport QuickSort from './QuickSort';\nimport BinarySort from './BinarySort';\n\nexport const SortingAlgorithms = [\n  {\n    name: 'selectionsort',\n    label: 'Selection Sort',\n    stateList: [],\n    perf: '',\n    func: SelectionSort,\n  },\n  {\n    name: 'mergesort',\n    label: 'Merge Sort',\n    stateList: [],\n    perf: '',\n    func: MergeSort,\n  },\n  {\n    name: 'insertionsort',\n    label: 'Insertion Sort',\n    stateList: [],\n    perf: '',\n    func: InsertionSort,\n  },\n  {\n    name: 'quicksort',\n    label: 'Quick Sort',\n    stateList: [],\n    perf: '',\n    func: QuickSort,\n  },\n  {\n    name: 'binarysort',\n    label: 'Binary Sort',\n    stateList: [],\n    perf: '',\n    func: BinarySort,\n  },\n  {\n    name: 'heapsort',\n    label: 'Heap Sort',\n    stateList: [],\n    perf: '',\n    func: HeapSort,\n  },\n  // {\n  //   name: 'timsort',\n  //   label: 'Tim Sort',\n  //   stateList: [],\n  //   func: SelectionSort,\n  // },\n];\n\nexport default SortingAlgorithms;\n","function SelectionSort(array) {\n  // Get array from state list\n  let tmpArray = [...array[0][0]];\n  let len = tmpArray.length;\n  let i, j;\n  for (i = 0; i < len; i++) {\n    let min = i;\n    for (j = i + 1; j < len; j++) {\n      if (tmpArray[min] > tmpArray[j]) {\n        min = j;\n      }\n      // Update state list\n      array.push([[...tmpArray], i, j]);\n    }\n\n    if (min !== i) {\n      // Perform swap\n      let tmp = tmpArray[i];\n      tmpArray[i] = tmpArray[min];\n      tmpArray[min] = tmp;\n      // Update state list\n      array.push([[...tmpArray], i, min]);\n    }\n  }\n}\n\nexport default SelectionSort;\n","function InsertionSort(array) {\n  // Get array from state list\n  let tmpArray = [...array[0][0]];\n  let length = tmpArray.length;\n  // Perform insertion sort\n  for (let i = 1; i < length; i++) {\n    let key = tmpArray[i];\n    let j = i - 1;\n    while (j >= 0 && tmpArray[j] > key) {\n      tmpArray[j + 1] = tmpArray[j];\n      j = j - 1;\n      // Update state list\n      array.push([[...tmpArray], i, j]);\n    }\n    tmpArray[j + 1] = key;\n    // Update state list\n    array.push([[...tmpArray], i, j]);\n  }\n}\n\nexport default InsertionSort;\n","export class llNode {\n  constructor(x, y, parent = null, visited = false) {\n    this.x = x;\n    this.y = y;\n    this.parent = parent;\n    this.visited = visited;\n  }\n}\n\nexport function constructNodeList(grid) {\n  let list = [];\n  list = grid.map((col, x) =>\n    col.map((square, y) => {\n      if (square !== 'o') {\n        return new llNode(x, y);\n      } else return null;\n    })\n  );\n\n  return list;\n}\n\nexport function constructPath(node) {\n  let path = [];\n\n  while (node.parent !== null) {\n    path.unshift(node);\n    node = node.parent;\n  }\n  return path;\n}\n","import { constructPath, constructNodeList } from '../../utils/llNode';\n\nfunction BFS(gridList, origin, destination) {\n  let queue = [],\n    nodeList = [],\n    nextNodes = [],\n    animationPath = [],\n    max_y = gridList[0].length,\n    max_x = gridList.length;\n  var node;\n  //Create nodeList from grid\n  nodeList = constructNodeList(gridList);\n\n  //Queue start node\n\n  queue.push(nodeList[origin.x][origin.y]);\n\n  //While nodes to be explored\n  while (queue.length > 0) {\n    node = queue.shift();\n\n    //Check if destination reached\n    if (node.x === destination.x && node.y === destination.y) {\n      break;\n    }\n    if (node.visited !== true) {\n      //Set node visited\n      node.visited = true;\n      animationPath.push([{ x: node.x, y: node.y, class: 'visited' }]);\n      //Explore next nodes and add to queue\n      nextNodes = explore(node, nodeList, max_x, max_y);\n      animationPath.push(\n        ...nextNodes.map((item) => [{ x: item.x, y: item.y, class: 'queued' }])\n      );\n      queue.push(...nextNodes);\n    }\n  }\n  //Construct path\n  animationPath.push(\n    ...constructPath(node).map((item) => [\n      { x: item.x, y: item.y, class: 'path' },\n    ])\n  );\n\n  return animationPath;\n}\n\nfunction explore(node, nodeList, max_x, max_y) {\n  let toExplore = [],\n    x = node.x,\n    y = node.y;\n\n  console.log(node);\n  //Check four cardinal nodes - CHANGE COLOUR\n  if (\n    x - 1 >= 0 &&\n    nodeList[x - 1][y] !== null &&\n    !nodeList[x - 1][y].visited\n  ) {\n    nodeList[x - 1][y].parent = node;\n    toExplore.push(nodeList[x - 1][y]);\n  }\n  if (\n    x + 1 < max_x &&\n    nodeList[x + 1][y] !== null &&\n    !nodeList[x + 1][y].visited\n  ) {\n    nodeList[x + 1][y].parent = node;\n    toExplore.push(nodeList[x + 1][y]);\n  }\n  if (\n    y - 1 >= 0 &&\n    nodeList[x][y - 1] !== null &&\n    !nodeList[x][y - 1].visited\n  ) {\n    nodeList[x][y - 1].parent = node;\n    toExplore.push(nodeList[x][y - 1]);\n  }\n  if (\n    y + 1 < max_y &&\n    nodeList[x][y + 1] !== null &&\n    !nodeList[x][y + 1].visited\n  ) {\n    nodeList[x][y + 1].parent = node;\n    toExplore.push(nodeList[x][y + 1]);\n  }\n\n  return toExplore;\n}\n\nexport default BFS;\n","import BFS from './BFS';\n\nexport const PathfinderAlgorithms = [\n  {\n    name: 'BFSsort',\n    label: 'Breadth First Search',\n    stateList: [],\n    func: BFS,\n  },\n];\n\nexport default PathfinderAlgorithms;\n","import './SidebarAccordion.css';\nimport React from 'react';\nimport SortingAlgorithms from './sorting/Algorithms/AlgorithmList';\nimport PathfinderAlgorithms from './pathfinding/Algorithms/AlgorithmList';\nimport { withStyles } from '@material-ui/core/styles';\nimport MuiAccordion from '@material-ui/core/Accordion';\nimport MuiAccordionSummary from '@material-ui/core/AccordionSummary';\nimport MuiAccordionDetails from '@material-ui/core/AccordionDetails';\n\nconst Accordion = withStyles({\n  root: {\n    background: 'transparent',\n    boxShadow: 'none',\n    '&:not(:last-child)': {\n      borderBottom: 0,\n    },\n    '&:before': {\n      display: 'none',\n    },\n    '&$expanded': {\n      margin: 'auto',\n    },\n  },\n  expanded: {},\n})(MuiAccordion);\n\nconst AccordionSummary = withStyles({\n  root: {\n    fontFamily: 'Monofett, cursive',\n    fontSize: '1.5em',\n    borderBottom: '1px solid rgba(0, 0, 0, .125)',\n    marginBottom: 1,\n    minHeight: 0,\n    '&$expanded': {\n      minHeight: 0,\n    },\n  },\n  content: {\n    '&$expanded': {\n      margin: '12px 0',\n    },\n  },\n  expanded: {},\n})(MuiAccordionSummary);\n\nconst AccordionDetails = withStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiAccordionDetails);\n\nexport default function SidebarAccordion({\n  canvasState,\n  updateType,\n  updateSort,\n  updatePathfinder,\n}) {\n  const [expanded, setExpanded] = React.useState('panel1');\n\n  const handleChange = (panel) => (event, newExpanded) => {\n    setExpanded(newExpanded ? panel : false);\n  };\n\n  return (\n    <div>\n      <Accordion\n        square\n        expanded={expanded === 'panel1'}\n        onChange={handleChange('panel1')}\n      >\n        <AccordionSummary aria-controls='panel1d-content' id='panel1d-header'>\n          <div onClick={() => updateType('sorting')}>\n            {' '}\n            show me <br />\n            Sorting Algorithms{' '}\n          </div>\n        </AccordionSummary>\n        <AccordionDetails>\n          <div className='ui list'>\n            {SortingAlgorithms.map((alg) => (\n              <React.Fragment key={alg.name}>\n                <input\n                  type='radio'\n                  name='sorting-algorithms'\n                  id={alg.name}\n                  checked={alg === canvasState.sortingAlg}\n                  onChange={(e) => updateSort(alg)}\n                />\n                <label htmlFor={alg.name}>{alg.label}</label>\n                <br />\n              </React.Fragment>\n            ))}\n          </div>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion\n        square\n        expanded={expanded === 'panel2'}\n        onChange={handleChange('panel2')}\n      >\n        <AccordionSummary aria-controls='panel2d-content' id='panel2d-header'>\n          <div onClick={() => updateType('pathfinding')}>\n            show me <br />\n            Pathfinding Algorithms\n          </div>\n        </AccordionSummary>\n        <AccordionDetails>\n          <div className='pathfinding-info'>\n            <div className='ui list'>\n              {PathfinderAlgorithms.map((alg) => (\n                <React.Fragment key={alg.name}>\n                  <input\n                    type='radio'\n                    name='pathfinding-algorithms'\n                    id={alg.name}\n                    checked={alg === canvasState.pfAlg}\n                    onChange={(e) => updatePathfinder(alg)}\n                  />\n                  <label htmlFor={alg.name}>{alg.label}</label>\n                  <br />\n                </React.Fragment>\n              ))}\n            </div>\n\n            <div className='ui list nodes'>\n              <li>\n                <input type='button' name='origin' className='origin' />\n                <label htmlFor='origin'>Origin</label>\n              </li>\n              <li>\n                <input\n                  type='button'\n                  name='destination'\n                  className='destination'\n                />\n                <label htmlFor='destination'>Destination</label>\n              </li>\n              <li>\n                <input type='button' name='Obstacle' className='obstacle' />\n                <label htmlFor='Obstacle'>Obstacle</label>\n              </li>\n              <li>\n                <input type='button' name='Visited' className='visited' />\n                <label htmlFor='Visited'>Visited</label>\n              </li>\n              <li>\n                <input type='button' name='Queued' className='queued' />\n                <label htmlFor='Queued'>Queued</label>\n              </li>\n            </div>\n          </div>\n        </AccordionDetails>\n      </Accordion>\n    </div>\n  );\n}\n","import './Sidebar.css';\nimport React from 'react';\nimport SidebarAccordion from './SidebarAccordion';\n\nconst Sidebar = ({\n  canvasState,\n  updateType,\n  updateSort,\n  updatePathfinder,\n  runFn,\n}) => {\n  // Play icon\n  var icon = 'play';\n  if (canvasState.active) {\n    icon = 'pause';\n  }\n\n  return (\n    <div className='ui left visible sidebar inverted vertical menu'>\n      <div className='header'>\n        <p>{'{'}</p>\n        <p>\n          Algorithm <br />\n          Visualiser\n        </p>\n        <p>\n          <br />\n          {'}'}\n        </p>\n      </div>\n\n      {/* Material UI Customised Accordion component */}\n      <SidebarAccordion\n        canvasState={canvasState}\n        updateType={updateType}\n        updateSort={updateSort}\n        updatePathfinder={updatePathfinder}\n      />\n\n      <div className='control'>\n        <button className='bouncy' onClick={() => runFn()}>\n          Visualise!\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Sidebar;\n","import './SortCard.css';\nimport React from 'react';\n\nconst SortCard = ({ algorithm, array, finished }) => {\n  var graph = array[0];\n  var index_i = array[1];\n  var index_j = array[2];\n\n  let sorted = finished ? 'sorted' : '';\n\n  const renderedArray = (array) => {\n    return array.map((val, index) => {\n      var i = '';\n      var j = '';\n      j = index === index_j ? 'caret down icon' : '';\n      i = index === index_i ? 'caret up icon' : '';\n\n      return (\n        <li\n          key={index}\n          style={{\n            height: val + '%',\n            width: 100 / array.length + '%',\n          }}\n          className={`vl ${j} ${i} ${sorted}`}\n        >\n          <i className={`${j}`} />\n          <i className={`${i}`} />\n        </li>\n      );\n    });\n  };\n\n  return (\n    <div className='ui segment sortCard'>\n      <div className='card-header'>{algorithm.label}</div>\n      <ul className='graph'>{renderedArray(graph)}</ul>\n    </div>\n  );\n};\n\nexport default SortCard;\n","const MAX = 100;\nconst MIN = 20;\n\nfunction RandArray(size) {\n  return Array.from({ length: size }, () =>\n    Math.floor(Math.random() * (MAX - MIN) + MIN)\n  );\n}\n\nexport default RandArray;\n","import './SortingCanvas.css';\nimport React from 'react';\nimport SortCard from './SortCard';\nimport RandArray from '../utils/RandArray';\nimport AlgorithmList from './Algorithms/AlgorithmList';\n\nconst ARRAY_SIZE = 40;\nconst SORT_SPEED = 100;\nclass SortingCanvas extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const array = RandArray(ARRAY_SIZE);\n\n    this.state = {\n      active: this.props.active,\n      selectedAlgorithm: this.props.selectedAlgorithm,\n      op: 0,\n      array: array,\n      algorithms: AlgorithmList,\n      timer: 0,\n    };\n    this.sort(array);\n  }\n\n  sort(array) {\n    AlgorithmList.forEach((alg) => {\n      alg.stateList = [[array, 0, 1]];\n      //time execution\n      let start = performance.now();\n      alg.func(alg.stateList);\n      let end = performance.now();\n      alg.perf = end - start;\n      //Indicate array is sorted\n      alg.stateList.push(0);\n    });\n  }\n\n  reset() {\n    this.setState({ active: false }, () => this.props.resetApp());\n  }\n\n  checkState() {\n    //Sort finished\n    if (this.state.selectedAlgorithm.stateList[this.state.op + 1] === 0) {\n      return true;\n    }\n    return false;\n  }\n\n  animate() {\n    this.sim = setInterval(() => {\n      if (this.checkState() || !this.state.active) {\n        clearInterval(this.sim);\n        this.reset();\n      } else {\n        this.setState({ op: this.state.op + 1 });\n      }\n    }, SORT_SPEED);\n  }\n\n  componentDidUpdate() {\n    if (this.state.selectedAlgorithm !== this.props.selectedAlgorithm) {\n      this.setState({\n        selectedAlgorithm: this.props.selectedAlgorithm,\n        op: 0,\n        algorithms: AlgorithmList,\n      });\n    }\n    if (this.state.active !== this.props.active) {\n      // Run Sorting animation\n      if (!this.state.active) {\n        this.setState({ active: this.props.active }, () => this.animate());\n      } else {\n        this.setState({ active: this.props.active });\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className='sortingGrid'>\n        <SortCard\n          algorithm={this.state.selectedAlgorithm}\n          array={this.state.selectedAlgorithm.stateList[this.state.op]}\n          finished={this.checkState()}\n        />\n      </div>\n    );\n  }\n}\n\nexport default SortingCanvas;\n","import React from 'react';\nimport './Node.css';\n\nconst Node = ({\n  x,\n  y,\n  onMouseDown,\n  onMouseUp,\n  onContext,\n  onMouseOverFn,\n  nodeType,\n  selecting,\n}) => {\n  let scale = selecting ? 'scale' : '';\n  return (\n    <div\n      id={`square-${x}-${y}`}\n      className={`node ${nodeType} ${scale} `}\n      onContextMenu={(e) => {\n        e.preventDefault();\n        onContext({ x, y });\n      }}\n      onMouseDown={(e) => onMouseDown({ x, y })}\n      onMouseUp={(e) => onMouseUp({ x, y })}\n      onMouseOver={(e) => onMouseOverFn({ x, y })}\n    ></div>\n  );\n};\n\nexport default Node;\n","import React from 'react';\nimport Node from './Node';\nimport './PathfindingCanvas.css';\nimport BFS from './Algorithms/BFS';\n\nconst NODE_DIM = 40;\nconst SORT_SPEED = 30;\nclass PathfindingCanvas extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      active: this.props.active,\n      dimensions: {\n        width: this.props.container.clientWidth,\n        height: this.props.container.clientHeight,\n      },\n      onClickMode: 'setOrigin',\n      origin: { x: 5, y: 5 },\n      destination: { x: 10, y: 10 },\n      nodeList: this.constructNodeList(this.props.container),\n      selectingObs: false,\n    };\n  }\n\n  componentDidMount() {\n    const max_x = Math.floor(this.state.dimensions.width / NODE_DIM) + 2;\n    const max_y = Math.floor(this.state.dimensions.height / NODE_DIM) + 2;\n    //Randomly assign origin\n    this.setOrigin(this.state.origin);\n    this.setDestination(this.state.destination);\n    //Event listener for window resize\n    window.addEventListener('resize', this.updateDimensions);\n  }\n\n  componentDidUpdate() {\n    if (this.state.active !== this.props.active) {\n      // Run visualiser\n      if (!this.state.active) {\n        this.setState({ active: this.props.active }, () => this.animate());\n      } else {\n        this.setState({ active: this.props.active });\n      }\n    }\n  }\n\n  constructNodeList(dimensions) {\n    // Get node max indices\n    const max_x = Math.floor(dimensions.clientWidth / NODE_DIM) + 2;\n    const max_y = Math.floor(dimensions.clientHeight / NODE_DIM) + 2;\n    var list = [];\n    for (let i = 0; i < max_x; i++) {\n      list.push([]);\n      for (let j = 0; j < max_y; j++) {\n        list[i].push('');\n      }\n    }\n    return list;\n  }\n\n  //\n  //SETTING THE STAGE\n\n  //Update grid size\n  updateDimensions = () => {\n    const nodeList = this.constructNodeList(this.props.container);\n\n    this.setState({\n      dimensions: {\n        width: this.props.container.clientWidth,\n        height: this.props.container.clientHeight,\n        onClickMode: 'setOrigin',\n      },\n      nodeList: [...nodeList],\n    });\n  };\n\n  setOrigin = (node) => {\n    if (node !== undefined) {\n      const newNodes = [...this.state.nodeList];\n      newNodes[this.state.origin.x][this.state.origin.y] = '';\n      newNodes[node.x][node.y] = 'origin';\n      this.setState({\n        origin: { x: node.x, y: node.y },\n        onClickMode: 'setObstacle',\n        nodeList: [...newNodes],\n      });\n    }\n  };\n\n  setDestination = (node) => {\n    if (node !== undefined) {\n      const newNodes = [...this.state.nodeList];\n      newNodes[this.state.destination.x][this.state.destination.y] = '';\n      newNodes[node.x][node.y] = 'destination';\n      this.setState({\n        destination: { x: node.x, y: node.y },\n        onClickMode: 'setObstacle',\n        nodeList: [...newNodes],\n      });\n    }\n  };\n\n  setObstacle = (node) => {\n    //Check origin and destination not overridden\n    if (\n      !['origin', 'destination'].includes(this.state.nodeList[node.x][node.y])\n    ) {\n      const newNodes = [...this.state.nodeList];\n      newNodes[node.x][node.y] = 'o';\n      this.setState({\n        nodeList: [...newNodes],\n      });\n    }\n  };\n\n  //\n  //Mouse event handlers\n\n  mouseUpHandler = (node) => {\n    if (this.state.onClickMode === 'setObstacle')\n      this.setState({\n        selectingObs: false,\n      });\n    else return this.setOrigin(node);\n  };\n\n  mouseDownHandler = (node) => {\n    if (this.state.onClickMode === 'setObstacle') {\n      this.setObstacle(node);\n      this.setState({\n        selectingObs: true,\n      });\n    } else\n      return () => {\n        /*Do Nothing */\n      };\n  };\n\n  mouseOverHandler = (node) => {\n    if (this.state.selectingObs) {\n      this.setObstacle(node);\n    }\n  };\n\n  //\n  //Animation\n  animate() {\n    //Get list of explored nodes from algorithm\n    const stateList = BFS(\n      this.state.nodeList,\n      this.state.origin,\n      this.state.destination\n    );\n\n    //Animate through list of explored nodes\n    let step = 1;\n    this.sim = setInterval(() => {\n      if (step > stateList.length - 1) {\n        clearInterval(this.sim);\n        this.props.resetApp();\n      } else {\n        let node = stateList[step][0];\n        document\n          .getElementById(`square-${node.x}-${node.y}`)\n          .classList.add(`${node.class}`);\n        step++;\n      }\n    }, SORT_SPEED);\n  }\n\n  constructGrid(dimensions) {\n    if (dimensions === null) {\n      return (\n        <div className='ui segment' style={{ height: 100 + '%' }}>\n          <div className='ui active dimmer'>\n            <div className='ui text loader'>Loading</div>\n          </div>\n          <p></p>\n        </div>\n      );\n    }\n    // Get node max indices\n    const max_x = Math.floor(dimensions.width / NODE_DIM) + 2;\n    const max_y = Math.floor(dimensions.height / NODE_DIM) + 2;\n    //Map array\n    const xArray = Array.from({ length: max_x }, (x, i) => i);\n    const yArray = Array.from({ length: max_y }, (y, i) => i);\n\n    return (\n      <div\n        className='grid'\n        style={{ height: max_y * NODE_DIM, width: max_x * NODE_DIM }}\n      >\n        {yArray.map((y) =>\n          xArray.map((x) => {\n            var type = this.state.nodeList[x][y];\n\n            return (\n              <Node\n                key={[x, y]}\n                x={x}\n                y={y}\n                onMouseDown={this.mouseDownHandler}\n                onMouseUp={this.mouseUpHandler}\n                onContext={this.setDestination}\n                toggleObs={this.toggleObs}\n                onMouseOverFn={this.mouseOverHandler}\n                selecting={this.state.selectingObs}\n                nodeType={type}\n              />\n            );\n          })\n        )}\n      </div>\n    );\n  }\n\n  render() {\n    return this.constructGrid(this.state.dimensions);\n  }\n}\n\nexport default PathfindingCanvas;\n","import React from 'react';\nimport SortingCanvas from './sorting/SortingCanvas';\nimport PathfindingCanvas from './pathfinding/PathfindingCanvas';\n\n//Turn this into a component with states\n\nconst Canvas = ({ searchType, sortingAlg, active, resetApp, container }) => {\n  //Determine Canvas type\n  var canvas = (\n    <SortingCanvas\n      selectedAlgorithm={sortingAlg}\n      active={active}\n      resetApp={() => resetApp()}\n    />\n  );\n\n  if (searchType === 'pathfinding') {\n    canvas = (\n      <PathfindingCanvas\n        container={container}\n        active={active}\n        resetApp={() => resetApp()}\n      />\n    );\n  }\n\n  return canvas;\n};\n\nexport default Canvas;\n","import './App.css';\nimport React from 'react';\nimport Sidebar from './Sidebar';\nimport Canvas from './Canvas';\nimport SortingAlgorithms from './sorting/Algorithms/AlgorithmList';\nimport PathfinderAlgorithms from './pathfinding/Algorithms/AlgorithmList';\n\nconst DEFAULT_CANVAS = 'sorting';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      canvas: DEFAULT_CANVAS,\n      sortingAlg: SortingAlgorithms[0],\n      pfAlg: PathfinderAlgorithms[0],\n      active: false,\n    };\n  }\n\n  //Update Canvas Algorithm Type\n  updateType = (type) => {\n    this.setState({ canvas: type });\n  };\n\n  //Update Canvas Algorithms\n  updateSortAlgs = (alg) => {\n    this.setState({ sortingAlg: alg });\n  };\n\n  //Update Canvas Algorithms\n  updatePathfinderAlgs = (alg) => {\n    console.log(alg);\n    this.setState({ pfAlg: alg });\n  };\n\n  runAlgorithm = () => {\n    this.setState({ active: !this.state.active }, () =>\n      console.log(this.state.active)\n    );\n  };\n\n  reset() {\n    console.log('Resetting App ');\n    this.setState({ active: false });\n  }\n\n  render() {\n    return (\n      <div className='structure'>\n        <Sidebar\n          canvasState={this.state}\n          updateType={this.updateType}\n          updateSort={this.updateSortAlgs}\n          updatePathfinder={this.updatePathfinderAlgs}\n          runFn={this.runAlgorithm}\n        />\n        <div className='interface' ref={(e) => (this.interface = e)}>\n          <Canvas\n            searchType={this.state.canvas}\n            sortingAlg={this.state.sortingAlg}\n            active={this.state.active}\n            resetApp={() => this.reset()}\n            container={this.interface}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDom from 'react-dom';\nimport App from './components/App';\n\nReactDom.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}